
#Taller 4 / Juan Camilo G√≥mez - Miguel Posso - Natalia Jim√©nez - Katheryn Guasca

###########################################################################################################################################################
#Esta es la clase matriz, la cual est√° definida por una matriz 3x3 para la representaci√≥n del juego,
#un peso asociado a la heur√≠stica definida que es 0 por defecto.
class Matriz:

    #Inicializaci√≥n de la matriz
    def __init__(self, peso=0):
        
        #Ac√° es inicializada la matriz 3x3, la cual fue establecido
        #que se dejar√≠a vacio para indicar que no hay ning√∫n valor
        self.matriz = [["" for _ in range(3)] for _ in range(3)]  

        #De igual manera se define el peso como default en 0
        self.peso = peso  

    #Setter de s√≠mbolo para el juego
    def setterSimbolo(self, fila, columna, elemento):
        
        #Ac√° se define seg√∫n el juego que elemento se pone en 
        #la matriz y en que posici√≥n con ayuda de fila y de columna.
        if 0 <= fila < 3 and 0 <= columna < 3:
            self.matriz[fila][columna] = elemento
        else:
            raise IndexError("Fila o columna fuera de rango. Debe estar entre 0 y 2.")

    #Getter del s√≠mbolo para el juego
    def getterSimbolo(self, fila, columna):
        
        #Ac√° simplemente se obtiene el valor del s√≠mbolo ubicado
        #en la fila o en la columna dada
        if 0 <= fila < 3 and 0 <= columna < 3:
            return self.matriz[fila][columna]
        else:
            raise IndexError("Fila o columna fuera de rango. Debe estar entre 0 y 2.")

    #M√©todo de impresi√≥n para mostrar la matriz 
    def mostrarMatriz(self):
        for fila in self.matriz:
            print(fila)


    #Getter para settear a la matriz el peso seg√∫n el c√°lculo de la heur√≠stica
    def setterPeso(self, peso):
        self.peso = peso

    #Getter para el peso
    def getterPeso(self):
        return self.peso
    
###########################################################################################################################################################
#Clase NodoArbol para la implementaci√≥n del √°rbol
class NodoArbol:
    def __init__(self, tablero, jugador=None):

        #Cada nodo del √°rbol se define por el jugador que lo controla,
        #el tablero recibido y los posibles hijos
        self.tablero = tablero  
        self.jugador = jugador  
        self.hijos = []  

    #M√©todo para agregar un hijo al nodo
    def agregarHijo(self, hijo):
        self.hijos.append(hijo)

    def __str__(self):
        return f"Jugador: {self.jugador}, Tablero: {self.tablero}"

###########################################################################################################################################################
#M√©todo para crear √°rbol de posibles respuestas a las jugadas que va a dos niveles
def crearArbolito(tableroRecibido, bot="X"):

    #Se inicializa un tablero y se genera la ra√≠z como copia del tablero recibido
    tableroArbolito = Matriz()
    for i in range(3):
        for j in range(3):
            tableroArbolito.setterSimbolo(i, j, tableroRecibido.getterSimbolo(i, j))

    #M√©todo auixiliar para generar el √°rbol
    def generarArbol(tableroActual, jugadorActual, nivel=0):
        nodo = NodoArbol(tableroActual, jugadorActual)

        #Cuando se llega al segundo nivel se para la recursi√≥n
        if nivel >= 2:
            return nodo

        #Estos for son los encargados de revisar si hay alguna casilla vacia osea : "" 
        #Y as√≠ generar una posible respuesta seg√∫n las casillas 
        for fila in range(3):
            for columna in range(3):
                if tableroActual.getterSimbolo(fila, columna) == "":
                    #Si se encuentra vacia la casilla, se inicializa una nueva
                    #matriz y se coloca el s√≠mbolo en el lugar libre
                    nuevoTablero = Matriz()
                    for i in range(3):
                        for j in range(3):
                            nuevoTablero.setterSimbolo(i, j, tableroActual.getterSimbolo(i, j))
                    nuevoTablero.setterSimbolo(fila, columna, jugadorActual)
                    
                    #De ah√≠ se elige pasa al siguiente jugador y se genera otro subarbol 
                    #a√±adiendo otro hijo
                    proximoJugador = "O" if jugadorActual == "X" else "X"
                    subarbol = generarArbol(nuevoTablero, proximoJugador, nivel + 1)
                    nodo.agregarHijo(subarbol)

        #Finalmente se devuelve el nodo ra√≠z para crear otra iteraci√≥n
        #del primer nivel       
        return nodo

    #Se retorna el arbolito completo
    return generarArbol(tableroArbolito, bot, nivel=0)


#Funci√≥n para imprimir el √°rbol
def imprimirArbol(nodo, nivel=0, prefijo=""):

    #Con esta impresi√≥n se muestra el jugador
    print(f"{prefijo}‚îî‚îÄ (Jugador: {nodo.jugador})")

    #Dibujar el tablero con separadores horizontales, se hacen separadores para el primer
    #nivel
    for i, fila in enumerate(nodo.tablero.matriz):
        print(f"{prefijo}    " + "  |  ".join(f"{cel if cel else ' '}" for cel in fila))
        if i < 2:  # No imprimir l√≠nea despu√©s de la √∫ltima fila
            print(f"{prefijo}    " + "-" * 15)

    #Se recorre cada hijo y se emplea la recursi√≥n en esta funci√≥n para imprimir
    if nodo.hijos:
        for i, hijo in enumerate(nodo.hijos):
            nuevo_prefijo = prefijo + ("‚îÇ   " if i < len(nodo.hijos) - 1 else "    ")
            imprimirArbol(hijo, nivel + 1, nuevo_prefijo)

###########################################################################################################################################################

#M√©todo para imprimir el tablero actual para jugar, se imprime del 1 al 9
#para facilitar la lectura
def imprimirTablero(tablero):
    print("\n")
    for i in range(3):
        print(" " + " | ".join([f" {tablero.getterSimbolo(i, j)} " if tablero.getterSimbolo(i, j) != "" else f" {(i * 3) + j + 1} " for j in range(3)]))
        if i < 2:  
            print("-----------------")
    print("\n")

#M√©todo para verificar que el juego ha terminado
def finalizarJuego(tablero, jugador):
    #Se revisa horizontal y vertical para revisar si hay 3 s√≠mbolos iguales
    for i in range(3):
        if all(tablero.getterSimbolo(i, j) == jugador for j in range(3)) or all(tablero.getterSimbolo(j, i) == jugador for j in range(3)):
            return True
    #Se revisan las diagonales por 3 s√≠mbolos iguales
    if all(tablero.getterSimbolo(i, i) == jugador for i in range(3)) or all(tablero.getterSimbolo(i, 2 - i) == jugador for i in range(3)):
        return True
    return False

#M√©todo para declarar empate (cuando se han llenado todas las casillas)
def verificarEmpate(tablero):
    return all(tablero.getterSimbolo(i, j) != "" for i in range(3) for j in range(3))

#M√©todo principal del juego
def jugarTriqui():

    #Se inicializa la matriz principal del juego y se 
    #le da el turno al bot representado por X
    tablero = Matriz()
    turno = "X"  

    #Se repite el ciclo del juego mientras no exista un ganador o empate
    while True:
        #Se imprime el tablero y se le pide la jugada(en este caso toca
        #crear la funci√≥n que permita decidir que coordenadas se le van
        #a dar al juego para jugar como bot)

        imprimirTablero(tablero)
        print(f"Turno del jugador {turno}")
        try:
            jugada = int(input("Ingresa el n√∫mero de la casilla (1-9): "))
        except ValueError:
            print("Entrada inv√°lida. Debes ingresar un n√∫mero.")
            continue
        if jugada < 1 or jugada > 9:
            print("N√∫mero fuera de rango. Intenta de nuevo.")
            continue

        #Se hace la traducci√≥n seg√∫n los n√∫meros del 1 al 9
        fila = (jugada - 1) // 3
        columna = (jugada - 1) % 3

        #Control de errores y seteo del s√≠mbolo si es correcto
        if tablero.getterSimbolo(fila, columna) != "":
            print("Casilla ocupada. Intenta de nuevo.")
            continue
        tablero.setterSimbolo(fila, columna, turno)

        #Se revisa si ya finzaliza el juego y se anunca el ganador
        if finalizarJuego(tablero, turno):
            imprimirTablero(tablero)
            print(f"¬°El jugador {turno} ha ganado! üéâ")
            break

        #Se revisa si hay empate
        if verificarEmpate(tablero):
            imprimirTablero(tablero)
            print("¬°Es un empate! ü§ù")
            break

        #Se cambia el turno seg√∫n corresponda y se crea el arbolito
        #para visualizaci√≥n de posibilidades

        turno = "O" if turno == "X" else "X"
        arbol = crearArbolito(tablero, turno)
        print("√Årbol de opciones:")
        imprimirArbol(arbol)

#Funci√≥n pa jugar
if __name__ == "__main__":
    jugarTriqui()
